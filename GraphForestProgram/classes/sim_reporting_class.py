from __future__ import annotations
from typing import List, Dict
from matplotlib import pyplot as plt
import matplotlib.image as mimage
from matplotlib.backends.backend_pdf import PdfPages
import statistics

""" The SimReporting Class:

    Implements the functionality to generate .png and .pdf extension files.
    The graph_forest module utilizes this module to generate and save pngs to the sim_files directory.
    Simulation graphs are saved to pngs and can be displayed using matplotlib.
    The generic_graph_1.pdf is generated by the provided module visualiser_random_forest_graph.

    Attributes:
        _report_title (str): Title of the simulation report.
        _reporting_dir (str): Directory to save simulation files.
        _iterations (int): Number of simulation iterations.
        _tree_data (List[float]): List of tree population data for each iteration.
        _rock_data (List[float]): List of non-combustible land data for each iteration.
        _wildfire_data (List[float]): List of wildfire data for each iteration.
        _sim_data_dict (Dict[str, List[float]]): Dictionary containing simulation data.
        _colours (List[str]): List of colors for plotting.
    Note: All class properties are protected.

    Methods:
        get_reporting_dir(self) -> str
        get_iterations(self) -> int
        get_tree_iteration_data(self) -> List[float]
        get_rock_iteration_data(self) -> List[float]
        get_wildfire_iteration_data(self) -> List[float]
        update_sim_data(self, trees: float, rocks: float, wildfire: float) -> None
        get_sim_data_as_dict(self) -> Dict[str, List[float]]
        set_sim_data_as_dict(self, trees: List[float], rocks: List[float], wildfire: List[float]) -> None
        save_as_jpg(self, jpg_path: str) -> None
        read_jpg(self, jpg: str) -> None
        save_to_pdf(self, pdf_path: str) -> None
        sim_graph(self) -> None
        mean_statistics(self) -> None
        generate_plots(self) -> None
        genrate_report_pdf(self) -> None
    Note: All the class methods are public. """

class SimReporting:
    def __init__(self:SimReporting) -> None:
        
        self._reporting_dir:str = 'sim_files/'
        self._iterations:int = int(0)
        self._tree_data:List[float] = []
        self._rock_data:List[float] = []
        self._wildfire_data:List[float] = []
        self._sim_data_dict:Dict[List[float], List[float], List[float]] = {
            'Tree Population': self._tree_data,
            'Non-combustible Land': self._rock_data,
            'Wildfires': self._wildfire_data
        }
        self._colours:List[str] = ['green', 'grey', 'red']
 
    def get_reporting_dir(self) -> str:
        return self._reporting_dir

    """ Get and Set Data. """           
    def get_iterations(self) -> int:
        return self._iterations   
    
    def get_tree_iteration_data(self) -> List[float]:
        return self._tree_data 
    
    def get_rock_iteration_data(self) -> List[float]:
        return self._rock_data     
    
    def get_wildfire_iteration_data(self) -> List[float]:
        return self._wildfire_data 
    
    def update_sim_data(self, trees:float, rocks:float, wildfire:float) -> None:
        self._iterations += 1
        self._tree_data.append(trees)
        self._rock_data.append(rocks)
        self._wildfire_data.append(wildfire)
        self.set_sim_data_as_dict(self._tree_data, self._rock_data, self._wildfire_data)

    def get_sim_data_as_dict(self) -> Dict[List[float]:List[float]:List[float]]:
        return self._sim_data_dict
    
    def set_sim_data_as_dict(self, trees:float, rocks:float, wildfire:float) -> None:
        self._sim_data_dict['Tree Population'] = trees
        self._sim_data_dict['Non-combustible Land'] = rocks
        self._sim_data_dict['Wildfires'] = wildfire
   
    """ Plotting Simulation Data. """
    def sim_graph(self) -> None:
        """ Pot 1: Generates simulation graph from project description. """
        data_collection = self.get_sim_data_as_dict()

        plt.clf()

        for key, value in data_collection.items():
            x_vals = range(1, len(value) + 1)
            if key == 'Tree Population':
                colour = self._colours[0]
            elif key == 'Non-combustible Land':
                colour = self._colours[1]
            elif key == 'Wildfires':
                colour = self._colours[2]

            plt.plot(x_vals, value, label=key, color=colour)

        plt.title('sim_files/sim_graph_1') 
        plt.xlabel('Iterations')
        plt.ylabel('General Population')
        plt.xlim(left=1)
        plt.ylim(bottom=0)
        plt.legend()
 
        self.save_as_jpg('sim_graph_1')

    def mean_statistics(self) -> None:
        """ Plot 2: Mean Statstics. """
        data_collection = self.get_sim_data_as_dict()
        
        plt.clf()

        labels = ['Tree Mean', 'Rock Mean', 'Wildfires Mean']
        means = []
        for value in data_collection.values():
            mean_stat = statistics.mean(value)
            means.append(mean_stat)
        
        plt.bar(labels, means, color=self._colours)
        plt.title('sim_files/sim_statistics_1')
        self.save_as_jpg('sim_statistics_1')
                  
    """ Save and Read jpgs. """
    def save_as_jpg(self, jpg_path:str) -> None:
        plt.savefig(self._reporting_dir + jpg_path + '.jpg')      

    def read_jpg(self, jpg:str) -> None:

        plt.clf()
        
        jpg_img = mimage.imread(self._reporting_dir + jpg)
        ax = plt.subplot()       
        ax.imshow(jpg_img)
        ax.set_xticks([])
        ax.set_yticks([])
        plt.show()

    def save_to_pdf(self, pdf_path:str) -> None:
        plt.savefig(self._reporting_dir + pdf_path + '.pdf')      
        plt.pause(0.1)
           
    def generate_plots(self) -> None:
        """ Call all plotting functions from the graph_forest module. """
        self.sim_graph()
        self.mean_statistics()

    def genrate_report_pdf(self) -> None:
        """ Write jpgs to the pdf file generic_graph_1 generated by the visualiser_random_forest_graph. """
        pdf_path:str = 'generic_graph_1.pdf'
        pdf = PdfPages(pdf_path)
        
        sim_graph = mimage.imread(self._reporting_dir + 'sim_graph_1.jpg')
        sim_mean = mimage.imread(self._reporting_dir + 'sim_statistics_1.jpg')
        jpgs = [sim_graph, sim_mean]

        for i in range(len(jpgs)):
            fig, ax = plt.subplots()
            ax.imshow(jpgs[i], cmap=None)
            if i == 0:
                ax.set_title('Genral Population Graph')
            elif i == 1:
                ax.set_title('Sim Statstics 1: Population Mean')    
            ax.axis('off')

            pdf.savefig()
            plt.close()

        pdf.close() 